<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Imagetragick(CVE-2016-3714)执行过程,漏洞分析以及修复方案]]></title>
      <url>/2017/10/10/Imagetragick/</url>
      <content type="html"><![CDATA[<p>##什么是ImageMagick</p>
<p>ImageMagick是一个免费的创建、编辑、合成图片的软件。它可以读取、转换、写入多种格式的图片。图片切割、颜色替换、各种效果的应用，图片的旋转、组合，文本，直线，多边形，椭圆，曲线，附加到图片伸展旋转。</p>
<p>##漏洞分析正文</p>
<p>这次披露的是ImageMagick的一个命令执行漏洞。首先定位到最终漏洞代码执行的地方,老外给出的poc是在一个文件内填充以下字符命名为<code>.mvg</code>格式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">push graphic-context</div><div class="line">viewbox 0 0 640 480</div><div class="line">fill &apos;url(https://example.com/image.jpg&quot;ls &quot;-la)&apos;</div><div class="line">pop graphic-context</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>我以POC为一个切入点,分析POC的执行过程。</p>
<p><img src="/2017/10/10/Imagetragick/351343864.png" alt="imagetragic_2.png"><br>首先从入口函数CovertMain()开始,在第81行MagickCommandGenesis()的第二个参数传入了ConvertImageCommand这个变量,这个变量是一个函数指针,指向了ConvertImageCommand()的函数首地址。所以MagickCommandGenesis()实现了函数的动态调用(非常好的写法)。</p>
<p>文件:wand/delegate.c:417行</p>
<p><img src="/2017/10/10/Imagetragick/3197429134.png" alt="imagetragic_3.png"><br>的函数ExternalDelegateCommand()中调用了system()函数，执行了我们注入的命令。</p>
<p>整个执行流程是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ConvertMain() -&gt; MagickCommandGenesis() -&gt; ConvertImageCommand() -&gt; ReadImages() -&gt; ReadImage() -&gt; ReadMVGImage() -&gt; DrawImage() -&gt;ReadImage() -&gt; InvokeDelegate() -&gt; system()</div></pre></td></tr></table></figure>
<p>ConvertImageCommand() -&gt; ReadImages() -&gt; ReadImage()这一段主要做了读取判断文件名类型,根据文件类型调用相应的decoder,而调用decoder的方式使用的是delegate模式。</p>
<p>在coders/mvg.c:67行中</p>
<p>有一个IsMVG()函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">if (LocaleNCompare((const char *) magick,&quot;push graphic-context&quot;,20) == 0)</div><div class="line">return(MagickTrue);</div></pre></td></tr></table></figure>
<p>这一段读取了文件前20个字符，判断是否是一个MVG格式的图片,</p>
<p><code>viewbox 0 0 640 480</code>主要由<code>文件:coders/mvg.c:170-204</code>处理。</p>
<p>处理<code>fill</code>字段就是出问题的地方, 当mvg文件有<code>fill</code>字段代表需要填充外部的图片进当前的图片,<code>pattern_info-&gt;filename</code>就是从`fill｀中解析出来的填充文件的字符串</p>
<p><img src="/2017/10/10/Imagetragick/1794061138.png" alt="imagetragic_4.png"><br><code>magick/delegate.c</code></p>
<p>中的InvokeDelegate()进行了调用了ExternalDelegateCommand()执行外部命令。</p>
<p>［题外话：可以看出来这个功能使用了delegate代理模式(对方法的封装)］</p>
<p>在调用前实际上是对当前种类的请求方法,相应的权限进行了判断</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">if (IsRightsAuthorized(domain,rights,read_info-&gt;magick) == MagickFalse)</div><div class="line">&#123;</div><div class="line">errno=EPERM;</div><div class="line">(void) ThrowMagickException(exception,GetMagickModule(),PolicyError,</div><div class="line">&quot;NotAuthorized&quot;,&quot;`%s&apos;&quot;,read_info-&gt;filename);</div><div class="line">read_info=DestroyImageInfo(read_info);</div><div class="line">return((Image *) NULL);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>并不是像网上说的这个程序一点安全都没有做</p>
<p>并且在<code>delegate.c</code>中也有对权限的检测。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">if (IsRightsAuthorized(DelegatePolicyDomain,rights,encode) == MagickFalse)</div><div class="line">&#123;</div><div class="line">errno=EPERM;</div><div class="line">(void) ThrowMagickException(exception,GetMagickModule(),PolicyError,</div><div class="line">&quot;NotAuthorized&quot;,&quot;`%s&apos;&quot;,encode);</div><div class="line">return(MagickFalse);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>并且在<code>delegate.c</code>中定义了合法字符的白名单,问题有一部分出在白名单这。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">static char</div><div class="line">whitelist[] =</div><div class="line">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_- &quot;</div><div class="line">&quot;.@&amp;;&lt;&gt;()|/\\\&apos;\&quot;:%=~`&quot;;</div><div class="line">...</div><div class="line">for (p+=strspn(p,whitelist); p != q; p+=strspn(p,whitelist))</div><div class="line">*p=&apos;_&apos;;</div><div class="line">return(sanitize_command);</div></pre></td></tr></table></figure>
<p>我们可以看到不在白名单中的字符全部会被替换成_,但是官方却把<code>|</code>和<code>;</code>放在了白名单中,导致了可以执行多个命令…….</p>
<p>所以,经过以上的流程分析,可以有两种修复方法：</p>
<p>1.设置<code>Policy</code>文件</p>
<p>policy.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;policymap&gt;</div><div class="line">&lt;policy domain=&quot;coder&quot; rights=&quot;none&quot; pattern=&quot;EPHEMERAL&quot; /&gt;</div><div class="line">&lt;policy domain=&quot;coder&quot; rights=&quot;none&quot; pattern=&quot;URL&quot; /&gt;</div><div class="line">&lt;policy domain=&quot;coder&quot; rights=&quot;none&quot; pattern=&quot;HTTPS&quot; /&gt;</div><div class="line">&lt;policy domain=&quot;coder&quot; rights=&quot;none&quot; pattern=&quot;MVG&quot; /&gt;</div><div class="line">&lt;policy domain=&quot;coder&quot; rights=&quot;none&quot; pattern=&quot;MSL&quot; /&gt;</div><div class="line">&lt;policy domain=&quot;coder&quot; rights=&quot;none&quot; pattern=&quot;TEXT&quot; /&gt;</div><div class="line">&lt;policy domain=&quot;coder&quot; rights=&quot;none&quot; pattern=&quot;SHOW&quot; /&gt;</div><div class="line">&lt;policy domain=&quot;coder&quot; rights=&quot;none&quot; pattern=&quot;WIN&quot; /&gt;</div><div class="line">&lt;policy domain=&quot;coder&quot; rights=&quot;none&quot; pattern=&quot;PLT&quot; /&gt;</div><div class="line">&lt;/policymap&gt;</div></pre></td></tr></table></figure>
<p><a href="https://imagetragick.com/" target="_blank" rel="external">来自imagetragick.com</a></p>
<p>2.如果不需要一些不常用的delegate里面的功能只保留https这个功能的话,去掉whitelist[] 里面的管道符号<code>|</code>，还有<code>;</code>号等特殊符号</p>
<p>可以看到去掉白名单里面的<code>;</code>和<code>|</code>之后,命令执行已经不成功了:/</p>
<p>相应的,想要发掘对应的delegate可以有什么样的利用,可以去执行具以下具体的委托</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">&lt;delegatemap&gt;</div><div class="line">&lt;delegate decode=&quot;autotrace&quot; stealth=&quot;True&quot; command=&quot;&amp;quot;convert&amp;quot; &amp;quot;%i&amp;quot; &amp;quot;pnm:%u&amp;quot;\n&amp;quot;autotrace&amp;quot; -input-format pnm -output-format svg -output-file &amp;quot;%o&amp;quot; &amp;quot;%u&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;blender&quot; command=&quot;&amp;quot;blender&amp;quot; -b &amp;quot;%i&amp;quot; -F PNG -o &amp;quot;%o&amp;quot;&amp;quot;\n&amp;quot;convert&amp;quot; -concatenate &amp;quot;%o*.png&amp;quot; &amp;quot;%o&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;browse&quot; stealth=&quot;True&quot; spawn=&quot;True&quot; command=&quot;&amp;quot;xdg-open&amp;quot; http://www.imagemagick.org/; rm &amp;quot;%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;cdr&quot; command=&quot;&amp;quot;uniconvertor&amp;quot; &amp;quot;%i&amp;quot; &amp;quot;%o.svg&amp;quot;; mv &amp;quot;%o.svg&amp;quot; &amp;quot;%o&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;cgm&quot; thread-support=&quot;False&quot; command=&quot;&amp;quot;ralcgm&amp;quot; -d ps -oC &amp;lt; &amp;quot;%i&amp;quot; &amp;gt; &amp;quot;%o&amp;quot; 2&amp;gt; &amp;quot;%Z&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;dvi&quot; command=&quot;&amp;quot;dvips&amp;quot; -q -o &amp;quot;%o&amp;quot; &amp;quot;%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;dng:decode&quot; command=&quot;&amp;quot;ufraw-batch&amp;quot; --silent --create-id=also --out-type=png --out-depth=16 &amp;quot;--output=%u.png&amp;quot; &amp;quot;%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;dot&quot; command=&apos;&amp;quot;dot&amp;quot; -Tsvg &amp;quot;%i&amp;quot; -o &amp;quot;%o&amp;quot;&apos; /&gt;</div><div class="line">&lt;delegate decode=&quot;edit&quot; stealth=&quot;True&quot; command=&quot;&amp;quot;/etc/alternatives/x-terminal-emulator&amp;quot; -title &amp;quot;Edit Image Comment&amp;quot; -e vi &amp;quot;%o&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;eps&quot; encode=&quot;pdf&quot; mode=&quot;bi&quot; command=&quot;&amp;quot;gs&amp;quot; -q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 &amp;quot;-sDEVICE=pdfwrite&amp;quot; &amp;quot;-sOutputFile=%o&amp;quot; &amp;quot;-f%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;eps&quot; encode=&quot;ps&quot; mode=&quot;bi&quot; command=&quot;&amp;quot;gs&amp;quot; -q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &amp;quot;-sDEVICE=nodevice&amp;quot; &amp;quot;-sOutputFile=%o&amp;quot; &amp;quot;-f%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;fig&quot; command=&quot;&amp;quot;fig2dev&amp;quot; -L ps &amp;quot;%i&amp;quot; &amp;quot;%o&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;plt&quot; command=&quot;&amp;quot;echo&amp;quot; &amp;quot;set size 1.25,0.62; set terminal postscript portrait color solid; set output \&apos;%o\&apos;; load \&apos;%i\&apos;&amp;quot; &amp;gt; &amp;quot;%u&amp;quot;;&amp;quot;gnuplot&amp;quot; &amp;quot;%u&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;hpg&quot; command=&quot;&amp;quot;hp2xx&amp;quot; -q -m eps -f `basename &amp;quot;%o&amp;quot;` &amp;quot;%i&amp;quot;;     mv -f `basename &amp;quot;%o&amp;quot;` &amp;quot;%o&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;hpgl&quot; command=&quot;if [ -e hp2xx -o -e /usr/bin/hp2xx ]; then     hp2xx -q -m eps -f `basename &amp;quot;%o&amp;quot;` &amp;quot;%i&amp;quot;;     mv -f `basename &amp;quot;%o&amp;quot;` &amp;quot;%o&amp;quot;;   else     echo &amp;quot;You need to install hp2xx to use HPGL files with ImageMagick.&amp;quot;;     exit 1;   fi&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;htm&quot; command=&quot;&amp;quot;html2ps&amp;quot; -U -o &amp;quot;%o&amp;quot; &amp;quot;%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;html&quot; command=&quot;&amp;quot;html2ps&amp;quot; -U -o &amp;quot;%o&amp;quot; &amp;quot;%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;https&quot; command=&quot;&amp;quot;curl&amp;quot; -s -k -o &amp;quot;%o&amp;quot; &amp;quot;https:%M&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;ilbm&quot; command=&quot;&amp;quot;ilbmtoppm&amp;quot; &amp;quot;%i&amp;quot; &amp;gt; &amp;quot;%o&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;man&quot; command=&quot;&amp;quot;groff&amp;quot; -man -Tps &amp;quot;%i&amp;quot; &amp;gt; &amp;quot;%o&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;mpeg:decode&quot; command=&quot;&amp;quot;ffmpeg&amp;quot; -v -1 -i &amp;quot;%i&amp;quot; -vframes %S -vcodec pam -an -f rawvideo -y &amp;quot;%u.pam&amp;quot; 2&amp;gt; &amp;quot;%Z&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate encode=&quot;mpeg:encode&quot; stealth=&quot;True&quot; command=&quot;&amp;quot;ffmpeg&amp;quot; -v -1 -mbd rd -trellis 2 -cmp 2 -subcmp 2 -g 300 -i &amp;quot;%M%%d.jpg&amp;quot; &amp;quot;%u.%m&amp;quot; 2&amp;gt; &amp;quot;%Z&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;sid&quot; command=&quot;&amp;quot;mrsidgeodecode&amp;quot; -if sid -i &amp;quot;%i&amp;quot; -of tif -o &amp;quot;%o&amp;quot; &amp;gt; &amp;quot;%u&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;pcl:color&quot; stealth=&quot;True&quot; command=&quot;&amp;quot;pcl6&amp;quot; -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &amp;quot;-sDEVICE=ppmraw&amp;quot; -dTextAlphaBits=%u -dGraphicsAlphaBits=%u &amp;quot;-r%s&amp;quot; %s &amp;quot;-sOutputFile=%s&amp;quot; &amp;quot;%s&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;pcl:cmyk&quot; stealth=&quot;True&quot; command=&quot;&amp;quot;pcl6&amp;quot; -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &amp;quot;-sDEVICE=pamcmyk32&amp;quot; -dTextAlphaBits=%u -dGraphicsAlphaBits=%u &amp;quot;-r%s&amp;quot; %s &amp;quot;-sOutputFile=%s&amp;quot; &amp;quot;%s&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;pcl:mono&quot; stealth=&quot;True&quot; command=&quot;&amp;quot;pcl6&amp;quot; -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &amp;quot;-sDEVICE=pbmraw&amp;quot; -dTextAlphaBits=%u -dGraphicsAlphaBits=%u &amp;quot;-r%s&amp;quot; %s &amp;quot;-sOutputFile=%s&amp;quot; &amp;quot;%s&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;pdf&quot; encode=&quot;eps&quot; mode=&quot;bi&quot; command=&quot;&amp;quot;gs&amp;quot; -q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &amp;quot;-sDEVICE=epswrite&amp;quot; &amp;quot;-sOutputFile=%o&amp;quot; &amp;quot;-f%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;pdf&quot; encode=&quot;ps&quot; mode=&quot;bi&quot; command=&quot;&amp;quot;gs&amp;quot; -q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &amp;quot;-sDEVICE=nodevice&amp;quot; &amp;quot;-sOutputFile=%o&amp;quot; &amp;quot;-f%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;tiff&quot; encode=&quot;launch&quot; mode=&quot;encode&quot; command=&quot;&amp;quot;gimp&amp;quot; &amp;quot;%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;pnm&quot; encode=&quot;ilbm&quot; mode=&quot;encode&quot; command=&quot;&amp;quot;ppmtoilbm&amp;quot; -24if &amp;quot;%i&amp;quot; &amp;gt; &amp;quot;%o&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;pov&quot; command=&quot;&amp;quot;povray&amp;quot; &amp;quot;+i%i&amp;quot; -D0 &amp;quot;+o%o&amp;quot; +fn%q +w%w +h%h +a -q9 &amp;quot;-kfi%s&amp;quot; &amp;quot;-kff%n&amp;quot;;&amp;quot;convert&amp;quot; -concatenate &amp;quot;%o*.png&amp;quot; &amp;quot;%o&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;ps&quot; encode=&quot;eps&quot; mode=&quot;bi&quot; command=&quot;&amp;quot;gs&amp;quot; -q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &amp;quot;-sDEVICE=epswrite&amp;quot; &amp;quot;-sOutputFile=%o&amp;quot; &amp;quot;-f%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;ps&quot; encode=&quot;pdf&quot; mode=&quot;bi&quot; command=&quot;&amp;quot;gs&amp;quot; -q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &amp;quot;-sDEVICE=pdfwrite&amp;quot; &amp;quot;-sOutputFile=%o&amp;quot; &amp;quot;-f%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;ps&quot; encode=&quot;print&quot; mode=&quot;encode&quot; command=&quot;lpr &amp;quot;%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;ps:alpha&quot; stealth=&quot;True&quot; command=&quot;&amp;quot;gs&amp;quot; -q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &amp;quot;-sDEVICE=pngalpha&amp;quot; -dTextAlphaBits=%u -dGraphicsAlphaBits=%u &amp;quot;-r%s&amp;quot; %s &amp;quot;-sOutputFile=%s&amp;quot; &amp;quot;-f%s&amp;quot; &amp;quot;-f%s&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;ps:cmyk&quot; stealth=&quot;True&quot; command=&quot;&amp;quot;gs&amp;quot; -q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &amp;quot;-sDEVICE=pam&amp;quot; -dTextAlphaBits=%u -dGraphicsAlphaBits=%u &amp;quot;-r%s&amp;quot; %s &amp;quot;-sOutputFile=%s&amp;quot; &amp;quot;-f%s&amp;quot; &amp;quot;-f%s&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;ps:color&quot; stealth=&quot;True&quot; command=&quot;&amp;quot;gs&amp;quot; -q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &amp;quot;-sDEVICE=pnmraw&amp;quot; -dTextAlphaBits=%u -dGraphicsAlphaBits=%u &amp;quot;-r%s&amp;quot; %s &amp;quot;-sOutputFile=%s&amp;quot; &amp;quot;-f%s&amp;quot; &amp;quot;-f%s&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;ps:mono&quot; stealth=&quot;True&quot; command=&quot;&amp;quot;gs&amp;quot; -q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &amp;quot;-sDEVICE=pbmraw&amp;quot; -dTextAlphaBits=%u -dGraphicsAlphaBits=%u &amp;quot;-r%s&amp;quot; %s &amp;quot;-sOutputFile=%s&amp;quot; &amp;quot;-f%s&amp;quot; &amp;quot;-f%s&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;rgba&quot; encode=&quot;rle&quot; mode=&quot;encode&quot; command=&quot;&amp;quot;rawtorle&amp;quot; -o &amp;quot;%o&amp;quot; -v &amp;quot;%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;scan&quot; command=&quot;&amp;quot;scanimage&amp;quot; -d &amp;quot;%i&amp;quot; &amp;gt; &amp;quot;%o&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;scanx&quot; command=&quot;&amp;quot;scanimage&amp;quot; &amp;gt; &amp;quot;%o&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;miff&quot; encode=&quot;show&quot; spawn=&quot;True&quot; command=&quot;&amp;quot;/usr/bin/display&amp;quot; -delay 0 -window-group %[group] -title &amp;quot;%l &amp;quot; &amp;quot;ephemeral:%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;shtml&quot; command=&quot;&amp;quot;html2ps&amp;quot; -U -o &amp;quot;%o&amp;quot; &amp;quot;%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;svg&quot; command=&quot;&amp;quot;rsvg-convert&amp;quot; -o &amp;quot;%o&amp;quot; &amp;quot;%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;txt&quot; encode=&quot;ps&quot; mode=&quot;bi&quot; command=&quot;&amp;quot;enscript&amp;quot; -o &amp;quot;%o&amp;quot; &amp;quot;%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;miff&quot; encode=&quot;win&quot; stealth=&quot;True&quot; spawn=&quot;True&quot; command=&quot;&amp;quot;/usr/bin/display&amp;quot; -immutable -delay 0 -window-group %[group] -title &amp;quot;%l &amp;quot; &amp;quot;ephemeral:%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;wmf&quot; command=&quot;&amp;quot;wmf2eps&amp;quot; -o &amp;quot;%o&amp;quot; &amp;quot;%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;xps:color&quot; stealth=&quot;True&quot; command=&quot;&amp;quot;gxps&amp;quot; -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &amp;quot;-sDEVICE=ppmraw&amp;quot; -dTextAlphaBits=%u -dGraphicsAlphaBits=%u &amp;quot;-r%s&amp;quot; %s &amp;quot;-sOutputFile=%s&amp;quot; &amp;quot;%s&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;xps:cmyk&quot; stealth=&quot;True&quot; command=&quot;&amp;quot;gxps&amp;quot; -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &amp;quot;-sDEVICE=bmpsep8&amp;quot; -dTextAlphaBits=%u -dGraphicsAlphaBits=%u &amp;quot;-r%s&amp;quot; %s &amp;quot;-sOutputFile=%s&amp;quot; &amp;quot;%s&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;xps:mono&quot; stealth=&quot;True&quot; command=&quot;&amp;quot;gxps&amp;quot; -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &amp;quot;-sDEVICE=pbmraw&amp;quot; -dTextAlphaBits=%u -dGraphicsAlphaBits=%u &amp;quot;-r%s&amp;quot; %s &amp;quot;-sOutputFile=%s&amp;quot; &amp;quot;%s&amp;quot;&quot;/&gt;</div><div class="line">&lt;/delegatemap&gt;</div></pre></td></tr></table></figure>
<p><img src="/2017/10/10/Imagetragick/4116422802.png" alt="B487FA86-DEA2-4A3F-9AA3-E2AA9A2D1170.png"><br>Reference:</p>
<p><a href="http://blog.csdn.net/liujiyong7/article/details/44833475" target="_blank" rel="external">囧囧有神的博客</a></p>
]]></content>
      
        <categories>
            
            <category> 漏洞分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 漏洞分析 </tag>
            
            <tag> Imagetragick </tag>
            
            <tag> 命令执行 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Nginx-HTTP-Parse 文件解析漏洞]]></title>
      <url>/2017/10/10/Nginx-HTTP-Parse-Vulnerability/</url>
      <content type="html"><![CDATA[<h2 id="补丁分析"><a href="#补丁分析" class="headerlink" title="补丁分析"></a>补丁分析</h2><p>CVE-2013-4547是Nginx出现过的一个解析漏洞，</p>
<p>官方的补丁打在了_ngx_http<em>parse.c</em>上</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">--- src/http/ngx_http_parse.c</div><div class="line">+++ src/http/ngx_http_parse.c</div><div class="line">@@ <span class="number">-617</span>,<span class="number">6</span> +<span class="number">617</span>,<span class="number">7</span> @@ ngx_http_parse_request_line(ngx_http_req</div><div class="line"><span class="keyword">default</span>:</div><div class="line">r-&gt;space_in_uri = <span class="number">1</span>;</div><div class="line">state = sw_check_uri;</div><div class="line">+                p--;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">@@ <span class="number">-670</span>,<span class="number">6</span> +<span class="number">671</span>,<span class="number">7</span> @@ ngx_http_parse_request_line(ngx_http_req</div><div class="line"><span class="keyword">default</span>:</div><div class="line">r-&gt;space_in_uri = <span class="number">1</span>;</div><div class="line">state = sw_uri;</div><div class="line">+                p--;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h2><p>使用gdb调试nginx，将断点下在<code>/nginx-1.5.6/src/http/ngx_http_parse.c</code>的<code>ngx_http_parse_request_line</code>上，</p>
<p>发送了测试payload</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">GET /a.jpg /0.php HTTP/1.1</div><div class="line">Host: 127.0.0.1</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</div><div class="line">Upgrade-Insecure-Requests: 1</div><div class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.116 Safari/537.36</div><div class="line">Accept-Encoding: gzip, deflate, sdch</div><div class="line">Accept-Language: zh-CN,zh;q=0.8,en;q=0.6</div></pre></td></tr></table></figure>
<p><code>/a.jpg /0.php</code>中的空格是hex 00，非真正的空格</p>
<p>传入的http请求只接收到了<code>/a.jpg</code></p>
<p>ngx_http_parse_request_line传入了两个ngx_http_request_t类和ngx_buf_t类的指针，ngx_http_request_t在以下文件中定义了一个别名</p>
<p>文件:  _/src/http/ngx_http<em>request.h</em></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ngx_http_request_s</span>     <span class="title">ngx_http_request_t</span>;</span></div></pre></td></tr></table></figure>
<p>ngx_http_request_s的结构成员</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ngx_http_request_s</span> &#123;</span></div><div class="line"><span class="keyword">uint32_t</span>                          signature;         <span class="comment">/* "HTTP" */</span></div><div class="line"></div><div class="line"><span class="keyword">ngx_connection_t</span>                 *connection;</div><div class="line"></div><div class="line"><span class="keyword">void</span>                            **ctx;</div><div class="line"><span class="keyword">void</span>                            **main_conf;</div><div class="line"><span class="keyword">void</span>                            **srv_conf;</div><div class="line"><span class="keyword">void</span>                            **loc_conf;</div><div class="line"></div><div class="line">ngx_http_event_handler_pt         read_event_handler;</div><div class="line">ngx_http_event_handler_pt         write_event_handler;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HTTP_CACHE)</span></div><div class="line"><span class="keyword">ngx_http_cache_t</span>                 *cache;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="keyword">ngx_http_upstream_t</span>              *upstream;</div><div class="line"><span class="keyword">ngx_array_t</span>                      *upstream_states;</div><div class="line"><span class="comment">/* of ngx_http_upstream_state_t */</span></div><div class="line"></div><div class="line"><span class="keyword">ngx_pool_t</span>                       *pool;</div><div class="line"><span class="keyword">ngx_buf_t</span>                        *header_in;</div><div class="line"></div><div class="line"><span class="keyword">ngx_http_headers_in_t</span>             headers_in;</div><div class="line"><span class="keyword">ngx_http_headers_out_t</span>            headers_out;</div><div class="line"></div><div class="line"><span class="keyword">ngx_http_request_body_t</span>          *request_body;</div><div class="line"></div><div class="line"><span class="keyword">time_t</span>                            lingering_time;</div><div class="line"><span class="keyword">time_t</span>                            start_sec;</div><div class="line"><span class="keyword">ngx_msec_t</span>                        start_msec;</div><div class="line"></div><div class="line"><span class="keyword">ngx_uint_t</span>                        method;</div><div class="line"><span class="keyword">ngx_uint_t</span>                        http_version;</div><div class="line"></div><div class="line"><span class="keyword">ngx_str_t</span>                         request_line;</div><div class="line"><span class="keyword">ngx_str_t</span>                         uri;</div><div class="line"><span class="keyword">ngx_str_t</span>                         args;</div><div class="line"><span class="keyword">ngx_str_t</span>                         exten;</div><div class="line"><span class="keyword">ngx_str_t</span>                         unparsed_uri;</div><div class="line"></div><div class="line"><span class="keyword">ngx_str_t</span>                         method_name;</div><div class="line"><span class="keyword">ngx_str_t</span>                         http_protocol;</div><div class="line"></div><div class="line"><span class="keyword">ngx_chain_t</span>                      *out;</div><div class="line"><span class="keyword">ngx_http_request_t</span>               *main;</div><div class="line"><span class="keyword">ngx_http_request_t</span>               *parent;</div><div class="line"><span class="keyword">ngx_http_postponed_request_t</span>     *postponed;</div><div class="line"><span class="keyword">ngx_http_post_subrequest_t</span>       *post_subrequest;</div><div class="line"><span class="keyword">ngx_http_posted_request_t</span>        *posted_requests;</div><div class="line"></div><div class="line"><span class="keyword">ngx_int_t</span>                         phase_handler;</div><div class="line">ngx_http_handler_pt               content_handler;</div><div class="line"><span class="keyword">ngx_uint_t</span>                        access_code;</div><div class="line"></div><div class="line"><span class="keyword">ngx_http_variable_value_t</span>        *variables;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_PCRE)</span></div><div class="line"><span class="keyword">ngx_uint_t</span>                        ncaptures;</div><div class="line"><span class="keyword">int</span>                              *captures;</div><div class="line">u_char                           *captures_data;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="keyword">size_t</span>                            limit_rate;</div><div class="line"><span class="keyword">size_t</span>                            limit_rate_after;</div><div class="line"></div><div class="line"><span class="comment">/* used to learn the Apache compatible response length without a header */</span></div><div class="line"><span class="keyword">size_t</span>                            header_size;</div><div class="line"></div><div class="line"><span class="keyword">off_t</span>                             request_length;</div><div class="line"></div><div class="line"><span class="keyword">ngx_uint_t</span>                        err_status;</div><div class="line"></div><div class="line"><span class="keyword">ngx_http_connection_t</span>            *http_connection;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HTTP_SPDY)</span></div><div class="line"><span class="keyword">ngx_http_spdy_stream_t</span>           *spdy_stream;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">ngx_http_log_handler_pt           log_handler;</div><div class="line"></div><div class="line"><span class="keyword">ngx_http_cleanup_t</span>               *cleanup;</div><div class="line"></div><div class="line"><span class="keyword">unsigned</span>                          subrequests:<span class="number">8</span>;</div><div class="line"><span class="keyword">unsigned</span>                          count:<span class="number">8</span>;</div><div class="line"><span class="keyword">unsigned</span>                          blocked:<span class="number">8</span>;</div><div class="line"></div><div class="line"><span class="keyword">unsigned</span>                          aio:<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">unsigned</span>                          http_state:<span class="number">4</span>;</div><div class="line"></div><div class="line"><span class="comment">/* URI with "/." and on Win32 with "//" */</span></div><div class="line"><span class="keyword">unsigned</span>                          complex_uri:<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">/* URI with "%" */</span></div><div class="line"><span class="keyword">unsigned</span>                          quoted_uri:<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">/* URI with "+" */</span></div><div class="line"><span class="keyword">unsigned</span>                          plus_in_uri:<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">/* URI with " " */</span></div><div class="line"><span class="keyword">unsigned</span>                          space_in_uri:<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">unsigned</span>                          invalid_header:<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">unsigned</span>                          add_uri_to_alias:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          valid_location:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          valid_unparsed_uri:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          uri_changed:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          uri_changes:<span class="number">4</span>;</div><div class="line"></div><div class="line"><span class="keyword">unsigned</span>                          request_body_in_single_buf:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          request_body_in_file_only:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          request_body_in_persistent_file:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          request_body_in_clean_file:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          request_body_file_group_access:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          request_body_file_log_level:<span class="number">3</span>;</div><div class="line"></div><div class="line"><span class="keyword">unsigned</span>                          subrequest_in_memory:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          waited:<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HTTP_CACHE)</span></div><div class="line"><span class="keyword">unsigned</span>                          cached:<span class="number">1</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HTTP_GZIP)</span></div><div class="line"><span class="keyword">unsigned</span>                          gzip_tested:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          gzip_ok:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          gzip_vary:<span class="number">1</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="keyword">unsigned</span>                          proxy:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          bypass_cache:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          no_cache:<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">* instead of using the request context data in</span></div><div class="line"><span class="comment">* ngx_http_limit_conn_module and ngx_http_limit_req_module</span></div><div class="line"><span class="comment">* we use the single bits in the request structure</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">unsigned</span>                          limit_conn_set:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          limit_req_set:<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></div><div class="line"><span class="keyword">unsigned</span>                          cacheable:<span class="number">1</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="keyword">unsigned</span>                          pipeline:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          chunked:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          header_only:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          keepalive:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          lingering_close:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          discard_body:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          internal:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          error_page:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          ignore_content_encoding:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          filter_finalize:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          post_action:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          request_complete:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          request_output:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          header_sent:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          expect_tested:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          root_tested:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          done:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          logged:<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">unsigned</span>                          buffered:<span class="number">4</span>;</div><div class="line"></div><div class="line"><span class="keyword">unsigned</span>                          main_filter_need_in_memory:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          filter_need_in_memory:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          filter_need_temporary:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          allow_ranges:<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_STAT_STUB)</span></div><div class="line"><span class="keyword">unsigned</span>                          stat_reading:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          stat_writing:<span class="number">1</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">/* used to parse HTTP headers */</span></div><div class="line"></div><div class="line"><span class="keyword">ngx_uint_t</span>                        state;</div><div class="line"></div><div class="line"><span class="keyword">ngx_uint_t</span>                        header_hash;</div><div class="line"><span class="keyword">ngx_uint_t</span>                        lowcase_index;</div><div class="line">u_char                            lowcase_header[NGX_HTTP_LC_HEADER_LEN];</div><div class="line"></div><div class="line">u_char                           *header_name_start;</div><div class="line">u_char                           *header_name_end;</div><div class="line">u_char                           *header_start;</div><div class="line">u_char                           *header_end;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">* a memory that can be reused after parsing a request line</span></div><div class="line"><span class="comment">* via ngx_http_ephemeral_t</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">u_char                           *uri_start;</div><div class="line">u_char                           *uri_end;</div><div class="line">u_char                           *uri_ext;</div><div class="line">u_char                           *args_start;</div><div class="line">u_char                           *request_start;</div><div class="line">u_char                           *request_end;</div><div class="line">u_char                           *method_end;</div><div class="line">u_char                           *schema_start;</div><div class="line">u_char                           *schema_end;</div><div class="line">u_char                           *host_start;</div><div class="line">u_char                           *host_end;</div><div class="line">u_char                           *port_start;</div><div class="line">u_char                           *port_end;</div><div class="line"></div><div class="line"><span class="keyword">unsigned</span>                          http_minor:<span class="number">16</span>;</div><div class="line"><span class="keyword">unsigned</span>                          http_major:<span class="number">16</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>我们接下来再看一下ngx_buf_t类的结构成员</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ngx_buf_s</span>  <span class="title">ngx_buf_t</span>;</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ngx_buf_s</span> &#123;</span></div><div class="line">u_char          *pos;</div><div class="line">u_char          *last;</div><div class="line"><span class="keyword">off_t</span>            file_pos;</div><div class="line"><span class="keyword">off_t</span>            file_last;</div><div class="line"></div><div class="line">u_char          *start;         <span class="comment">/* start of buffer */</span></div><div class="line">u_char          *end;           <span class="comment">/* end of buffer */</span></div><div class="line"><span class="keyword">ngx_buf_tag_t</span>    tag;</div><div class="line"><span class="keyword">ngx_file_t</span>      *file;</div><div class="line"><span class="keyword">ngx_buf_t</span>       *shadow;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/* the buf's content could be changed */</span></div><div class="line"><span class="keyword">unsigned</span>         temporary:<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">* the buf's content is in a memory cache or in a read only memory</span></div><div class="line"><span class="comment">* and must not be changed</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">unsigned</span>         memory:<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">/* the buf's content is mmap()ed and must not be changed */</span></div><div class="line"><span class="keyword">unsigned</span>         mmap:<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">unsigned</span>         recycled:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>         in_file:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>         flush:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>         sync:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>         last_buf:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>         last_in_chain:<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">unsigned</span>         last_shadow:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>         temp_file:<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">/* STUB */</span> <span class="keyword">int</span>   num;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>结构成员名字的含义：</p>
<table>
<thead>
<tr>
<th>pos:</th>
<th style="text-align:center">当buf所指向的数据在内存里的时候，pos指向的是这段数据开始的位置。</th>
</tr>
</thead>
<tbody>
<tr>
<td>last:</td>
<td style="text-align:center">当buf所指向的数据在内存里的时候，last指向的是这段数据结束的位置。</td>
</tr>
<tr>
<td>file_pos:</td>
<td style="text-align:center">当buf所指向的数据是在文件里的时候，file_pos指向的是这段数据的开始位置在文件中的偏移量。</td>
</tr>
<tr>
<td>file_last:</td>
<td style="text-align:center">当buf所指向的数据是在文件里的时候，file_last指向的是这段数据的结束位置在文件中的偏移量。</td>
</tr>
<tr>
<td>start:</td>
<td style="text-align:center">当buf所指向的数据在内存里的时候，这一整块内存包含的内容可能被包含在多个buf中(比如在某段数据中间插入了其他的数据，这一块数据就需要被拆分开)。那么这些buf中的start和end都指向这一块内存的开始地址和结束地址。而pos和last指向本buf所实际包含的数据的开始和结尾。</td>
</tr>
<tr>
<td>end:</td>
<td style="text-align:center">解释参见start。</td>
</tr>
<tr>
<td>tag:</td>
<td style="text-align:center">实际上是一个void*类型的指针，使用者可以关联任意的对象上去，只要对使用者有意义。</td>
</tr>
<tr>
<td>file:</td>
<td style="text-align:center">当buf所包含的内容在文件中时，file字段指向对应的文件对象。</td>
</tr>
<tr>
<td>shadow:</td>
<td style="text-align:center">当这个buf完整copy了另外一个buf的所有字段的时候，那么这两个buf指向的实际上是同一块内存，或者是同一个文件的同一部分，此时这两个buf的shadow字段都是指向对方的。那么对于这样的两个buf，在释放的时候，就需要使用者特别小心，具体是由哪里释放，要提前考虑好，如果造成资源的多次释放，可能会造成程序崩溃！</td>
</tr>
<tr>
<td>temporary:</td>
<td style="text-align:center">为1时表示该buf所包含的内容是在一个用户创建的内存块中，并且可以被在filter处理的过程中进行变更，而不会造成问题。</td>
</tr>
<tr>
<td>memory:</td>
<td style="text-align:center">为1时表示该buf所包含的内容是在内存中，但是这些内容却不能被进行处理的filter进行变更。</td>
</tr>
<tr>
<td>mmap:</td>
<td style="text-align:center">为1时表示该buf所包含的内容是在内存中, 是通过mmap使用内存映射从文件中映射到内存中的，这些内容却不能被进行处理的filter进行变更。</td>
</tr>
<tr>
<td>recycled:</td>
<td style="text-align:center">可以回收的。也就是这个buf是可以被释放的。这个字段通常是配合shadow字段一起使用的，对于使用ngx_create_temp_buf 函数创建的buf，并且是另外一个buf的shadow，那么可以使用这个字段来标示这个buf是可以被释放的。</td>
</tr>
<tr>
<td>in_file:</td>
<td style="text-align:center">为1时表示该buf所包含的内容是在文件中。</td>
</tr>
<tr>
<td>flush:</td>
<td style="text-align:center">遇到有flush字段被设置为1的的buf的chain，则该chain的数据即便不是最后结束的数据（last_buf被设置，标志所有要输出的内容都完了），也会进行输出，不会受postpone_output配置的限制，但是会受到发送速率等其他条件的限制。</td>
</tr>
<tr>
<td>sync:</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>last_buf:</td>
<td style="text-align:center">数据被以多个chain传递给了过滤器，此字段为1表明这是最后一个buf。</td>
</tr>
<tr>
<td>last_in_chain:</td>
<td style="text-align:center">在当前的chain里面，此buf是最后一个。特别要注意的是last_in_chain的buf不一定是last_buf，但是last_buf的buf一定是last_in_chain的。这是因为数据会被以多个chain传递给某个filter模块。</td>
</tr>
<tr>
<td>last_shadow:</td>
<td style="text-align:center">在创建一个buf的shadow的时候，通常将新创建的一个buf的last_shadow置为1。</td>
</tr>
<tr>
<td>temp_file:</td>
<td style="text-align:center">由于受到内存使用的限制，有时候一些buf的内容需要被写到磁盘上的临时文件中去，那么这时，就设置此标志 。</td>
</tr>
</tbody>
</table>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">line：<span class="number">109</span></div><div class="line"><span class="keyword">enum</span> &#123;</div><div class="line">sw_start = <span class="number">0</span>,</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>定义了一个状态机，通过state的值来确定处理步骤。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">line：139 state = r-&gt;state;</div></pre></td></tr></table></figure>
<p>state被赋值为r-&gt;state，r-&gt;state的类型为ngx_uint_t，ngx_uint_t类型是在以下文件中声明的</p>
<p>文件：_src/core/ngx<em>config.h</em></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">uintptr_t</span>       <span class="keyword">ngx_uint_t</span>;</div></pre></td></tr></table></figure>
<p>而uintptr_t类型的话，在Mac OS X中是在</p>
<p><code>_/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/usr/include/sys/_types/_uintptr_t.h_</code></p>
<p>中被声明</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span>        <span class="keyword">uintptr_t</span>;</div></pre></td></tr></table></figure>
<p>可以看出uintptr_t类型实际上就是一个unsigned long类型，在<strong>《深入分析Linux内核源码》</strong>中的原因描述是这样的，</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">尽管在混合不同数据类型时你必须小心, 有时有很好的理由这样做. 一种情况是因为内存存取, 与内核相关时是特殊的. 概念上, 尽管地址是指针, 内存管理常常使用一个无符号的整数类型更好地完成; 内核对待物理内存如同一个大数组, 并且内存地址只是一个数组索引. 进一步地, 一个指针容易解引用; 当直接处理内存存取时, 你几乎从不想以这种方式解引用. 使用一个整数类型避免了这种解引用, 因此避免了 bug. 因此, 内核中通常的内存地址常常是 unsigned long, 利用了指针和长整型一直是相同大小的这个事实, 至少在 Linux 目前支持的所有平台上.</div><div class="line"></div><div class="line">因为其所值的原因, C99 标准定义了 intptr<span class="emphasis">_t 和 uintptr_</span>t 类型给一个可以持有一个指针值的整型变量. 但是, 这些类型几乎没在 2.6 内核中使用</div></pre></td></tr></table></figure>
<p>进行验证：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> a;</div><div class="line"><span class="keyword">int</span> *b;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d %d"</span>, <span class="keyword">sizeof</span>(a), <span class="keyword">sizeof</span>(b));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">8</span> <span class="number">8</span></div><div class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></div></pre></td></tr></table></figure>
<p>​    接下来进入了for循环里面，for循环里面的p的开始和结束分别为buff在内存中的开始(pos)和结束(last)。b-&gt;pos和b-&gt;last的类型是u_char,u<em>char是在MacOSX在</em>/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/usr/include/sys/types.h_中定义的。<br>​<br>​    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">​    line：84 typedef unsigned char     u_char;</div><div class="line">​</div></pre></td></tr></table></figure></p>
<p>​<br>​    所以pos和last分别储存了buff开始和结束的unsigned类型的两个字符。<br>​<br>​    <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">​    line：<span class="number">141</span> <span class="keyword">for</span> (p = b-&gt;pos; p &lt; b-&gt;last; p++)&#123;...&#125;</div><div class="line">​</div></pre></td></tr></table></figure></p>
<p>​<br>​    接着使用了一个for循环来控制指针的移动，ch为当前指针指向的字符。r-&gt;state的值为0<br>​<br>​    ，所以第一次进入状态机进入了sw_start，如果第一个字符是CR（回车）或者LF（换行）就break，接下去再把指针p向后移动直到碰到非LF和CR，再进入下一个判断语句<br>​<br>​    <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">​    <span class="keyword">if</span> ((ch &lt; <span class="string">'A'</span> || ch &gt; <span class="string">'Z'</span>) &amp;&amp; ch != <span class="string">'_'</span>) &#123;</div><div class="line">​    <span class="keyword">return</span> NGX_HTTP_PARSE_INVALID_METHOD;</div><div class="line">​    &#125;</div><div class="line">​</div></pre></td></tr></table></figure></p>
<p>​<br>​    遇到A-Z和_之外的字符都返回一个解析错误。通过了这两项检查，会向后移动直到遇到一个空格，会进入method的判断，开发人员先判断了遇到的第一个空格之前字符的数量，根据数量再进入相应的case中去判断是什么method然后再将r-&gt;method设置为相应的method。<br>​<br>​    完成了以上对HTTP method的判断之后，进入了第二个判断sw_spaces_before_uri，<br>​<br>​    <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">​    <span class="keyword">switch</span> (ch) &#123;</div><div class="line">​    <span class="keyword">case</span> <span class="string">' '</span>:</div><div class="line">​    <span class="keyword">break</span>;</div><div class="line">​    <span class="keyword">default</span>:</div><div class="line">​    <span class="keyword">return</span> NGX_HTTP_PARSE_INVALID_REQUEST;</div><div class="line">​    &#125;</div><div class="line">​</div></pre></td></tr></table></figure></p>
<p>​<br>​    这一段我们可以看出，只要遇到空格（space）指针就会就会往后移动，直到遇到’/‘或者遇到字符A-Z。<br>​<br>​    <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">​    c = (u_char) (ch | <span class="number">0x20</span>);</div><div class="line">​    <span class="keyword">if</span> (c &gt;= <span class="string">'a'</span> &amp;&amp; c &lt;= <span class="string">'z'</span>) &#123;</div><div class="line">​    r-&gt;schema_start = p;</div><div class="line">​    state = sw_schema;</div><div class="line">​    <span class="keyword">break</span>;</div><div class="line">​    &#125;</div><div class="line">​</div></pre></td></tr></table></figure></p>
<p>​<br>​    代码就是判断是否是sw_host_start，不是sw_host_start就判别为uri的开始，如果在<code>:</code>后碰到两个<code>/</code>并且如果<code>[</code>就进行ipv6的判断。<br>​<br>​    文字看起来没有图像直观，以下是解析的流程图<img src="/2017/10/10/Nginx-HTTP-Parse-Vulnerability/1509484404.png" alt="nginx_http0.png"><br>​<br>​    在sw_uri之后放置空格，case会进入sw_check_uri_http_09，这时候uri_ext和uri_end之间的值为Nginx判断的后缀，即如果让nginx解析的是以下的连接<br>​<br>​    <code>http://www.lonelyrain.me/1.jpg[空格][零零]1.php</code><br>​<br>​    那么nginx会判定为<code>jpg</code>，到了case <code>sw_check_uri_http_09</code>中，遇到/00并不会进行处理,会使用default条件<br>​<br>​    <img src="/2017/10/10/Nginx-HTTP-Parse-Vulnerability/2972208958.png" alt="nginx_http_1.png"><br>​<br>​    <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">​    <span class="keyword">default</span>:</div><div class="line">​    r-&gt;space_in_uri = <span class="number">1</span>;</div><div class="line">​    state = sw_check_uri;</div><div class="line">​    <span class="keyword">break</span>;</div><div class="line">​</div></pre></td></tr></table></figure></p>
<p>​<br>​    <img src="/2017/10/10/Nginx-HTTP-Parse-Vulnerability/1509484404.png" alt="nginx_gdb_1.png"><br>​<br>​    成功的没有让nginx对/00进行处理。<br>​<br>​    而后面.php成功的将<code>uri_ext</code>覆盖为了<code>php</code>，之后 nginx 就会将请求发送给 <code>fastcgi</code> 去解析，<code>fastcgi</code>查找文件会被00阻断［这里代码找不到，留个坑］，于是漏洞就形成了。<br>​<br>​    <img src="/2017/10/10/Nginx-HTTP-Parse-Vulnerability/2565879554.png" alt="nginx_burp.png"><br>​<br>​    注意点就是jpg文件上传的时候必须带一个空格，触发的时候空格后面加一个00跟上.php就能触发了［security.limit_extensions没有限制的情况下］<br>​<br>​    Reference:<br>​<br>​    <a href="http://tengine.taobao.org/book/" target="_blank" rel="external">taobao,(2013)._nginx开发从入门到精通</a><br>​<br>​    <a href="http://blog.csdn.net/liujiyong7/article/details/44833475" target="_blank" rel="external">囧囧有神,(2015)._nginx源码分析之http解码实现</a></p>
]]></content>
      
        <categories>
            
            <category> 漏洞分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 漏洞分析 </tag>
            
            <tag> Nginx </tag>
            
            <tag> 解析漏洞 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[新博客,新旅程]]></title>
      <url>/2017/10/10/%E6%96%B0%E5%8D%9A%E5%AE%A2-%E6%96%B0%E6%97%85%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h2 id="A-New-Journey"><a href="#A-New-Journey" class="headerlink" title="A New Journey"></a>A New Journey</h2><p>又一段新旅程，新的开始。</p>
<p>人生天地之间，若白驹过隙，忽然而已。</p>
]]></content>
      
        <categories>
            
            <category> essay </category>
            
        </categories>
        
        
        <tags>
            
            <tag> essay </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
